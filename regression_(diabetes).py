# -*- coding: utf-8 -*-
"""Regression (Diabetes)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12qQdYEtJYBriwNdDeqFV8YMKztlCObph

****Implementation of linear regression on diabetes dataset****
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.datasets import load_diabetes

df=load_diabetes()
df

dataset=pd.DataFrame(df.data)
dataset

dataset.columns=df.feature_names
dataset.head()

## independent and dependent features
X=dataset
y=df.target #output

y

## train test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.30, random_state=42)
X_train

# ## standardizing the datasets
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)  # fit on training data
X_test = scaler.transform(X_test)        # transform test data
# scaler.inverse_transform(X_train)

from sklearn.linear_model import LinearRegression #multiple linear regression problem
#cross validation
from sklearn.model_selection import cross_val_score

regression= LinearRegression()
regression.fit(X_train,y_train)

mse=cross_val_score(regression,X_train,y_train,scoring='neg_mean_squared_error',cv=5)

np.mean(mse)

## prediction
reg_pred=regression.predict(X_test)

reg_pred

import seaborn as sns
sns.displot(reg_pred-y_test,kind='kde')
# plt.show()

from sklearn.metrics import r2_score
score=r2_score(y_test,reg_pred)
score

"""**Ridge Regression Algorithm**"""

from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV

ridge_regressor= Ridge()
ridge_regressor

parameters={'alpha':[1,2,5,10,20,30,40,50,60,70,80,90]}
ridgecv=GridSearchCV(ridge_regressor,parameters,scoring='neg_mean_squared_error',cv=5)
ridgecv.fit(X_train,y_train)

print(ridgecv.best_params_)
print(ridgecv.best_score_)

ridge_pred=ridgecv.predict(X_test)

import seaborn as sns
sns.displot(ridge_pred-y_test,kind='kde')

score=r2_score(y_test,ridge_pred)
score

"""**Lasso Regression Algorithm**"""

from sklearn.linear_model import Lasso
lasso=Lasso()
parameters={'alpha':[1,2,5,10,20,30,40,50,60,70,80,90]}
lassocv=GridSearchCV(lasso,parameters,scoring='neg_mean_squared_error',cv=5)
lassocv.fit(X_train,y_train)

print(lassocv.best_params_)
print(lassocv.best_score_)

lasso_pred=lassocv.predict(X_test)
sns.displot(lasso_pred-y_test,kind='kde')

score=r2_score(y_test,lasso_pred)
score

"""**This Project is the Combination of Linear, Ridge and Lasso Regresion**"""